{"version":3,"file":"vue.js","sources":["../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/compiler/parse.js","../src/compiler/index.js","../src/init.js","../src/index.js"],"sourcesContent":["// 我们希望重写数组中的部分方法\r\nlet oldArrayProto = Array.prototype;//获取数组的原型\r\n\r\nexport let newArrayProto = Object.create(oldArrayProto)\r\n\r\nlet methods = [//找到所有的变异方法\r\n  'push',\r\n  'pop',\r\n  'shift',\r\n  'unshift',\r\n  'reverse',\r\n  'sort',\r\n  'splice'\r\n]\r\n//concat slice 都不会改变原数组\r\n\r\n\r\nmethods.forEach(method => {\r\n  newArrayProto[method] = function (...args) {//这里重写了数组的方法\r\n    let result = oldArrayProto[method].call(this, ...args)//内部调用原来的方法，函数的劫持，切片编程\r\n\r\n    let inserted;\r\n    let ob = this.__ob__;\r\n    switch (method) {\r\n      case 'push':\r\n      case 'unshift':\r\n        inserted = args\r\n        break;\r\n      case 'splice':\r\n        inserted = args.splice(2)\r\n        break\r\n    }\r\n    if (inserted) {\r\n      ob.observeArray(inserted)\r\n    }\r\n    return result\r\n  }\r\n})\r\n","\r\nimport { newArrayProto } from './array'\r\nclass Observe {\r\n  constructor(data) {\r\n    Object.defineProperty(data, '__ob__', {\r\n      value: this,\r\n      enumerable: false\r\n    })\r\n    //给数据加了一个标识，如果数据上有__ob__，则说明这个属性被观测过\r\n    //Object.defineProperty只能劫持已经存在的属性，后增的，或者删除的不知道\r\n    if (Array.isArray(data)) {\r\n      //这里我们可以重写数组中的方法，7个变异方法,是可以修改数组本身的\r\n      data.__proto__ = newArrayProto\r\n      this.observeArray(data)//如果数组中放的是对象，是可以监控到对象的变化\r\n    } else {\r\n      this.walk(data)// 对 data 进行遍历，劫持属性\r\n    }\r\n\r\n  }\r\n  walk(data) {\r\n    //重新定义属性\r\n    Object.keys(data).forEach(key => defineReactive(data, key, data[key]))\r\n  }\r\n  observeArray(data) {\r\n    data.forEach(item => observe(item))\r\n  }\r\n}\r\n\r\nexport function defineReactive(target, key, value) {\r\n  //闭包\r\n  observe(value)//对所有的对象都进行属性劫持\r\n  Object.defineProperty(target, key, {\r\n    get() {//取值的时候会执行get\r\n      return value\r\n    },\r\n    set(newValue) {//修改的时候会执行set\r\n      if (newValue === value) return\r\n      value = newValue\r\n      observe(newValue)\r\n    }\r\n  })\r\n}\r\n\r\n\r\nexport function observe(data) {\r\n  if (typeof data !== 'object' || data === null) {\r\n    return  // 只对对象进行劫持\r\n  }\r\n  // 如果一个对象被劫持过了，就不需要再被劫持\r\n  // 而要判断一个对象是否被劫持过，可以增添一个实例，用实例来判断\r\n  // 这里先不加这段逻辑，后面章节会加\r\n  // if (data.__ob__ instanceof Observe) {\r\n  //   return data.__ob__\r\n  // }\r\n  return new Observe(data)\r\n}\r\n\r\n","import { observe } from './observe/index'\r\nexport function initState(vm) {\r\n  const opts = vm.$options;\r\n  if (opts.data) {\r\n    initData(vm)\r\n  }\r\n}\r\n\r\nfunction proxy(vm, target, key) {\r\n  Object.defineProperty(vm, key, {\r\n    get() {\r\n      return vm[target][key]\r\n    },\r\n    set(newValue) {\r\n      vm[target][key] = newValue\r\n    }\r\n  })\r\n}\r\n\r\nfunction initData(vm) {\r\n  let data = vm.$options.data; // 这个data就是 new Vue时传入的data，可能是函数也可能是对象\r\n  data = typeof data === 'function' ? data.call(vm) : data// 如果是函数则执行函数拿到返回值\r\n\r\n  vm._data = data;\r\n  observe(data)\r\n\r\n  //将vm._data 用vm来代理就可以了\r\n  for (let key in data) {\r\n    proxy(vm, '_data', key)\r\n  }\r\n}\r\n","\r\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`;   // aa-aa\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`; // aa:aa 命名空间字符串\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 标签开头的正则 捕获的内容是标签名\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`); // 匹配标签结尾的 </div>\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; // 匹配属性的\r\nconst startTagClose = /^\\s*(\\/?)>/; // 匹配标签结束的 >\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g\r\n\r\nexport function parseHTML(html) {\r\n  const ELEMETN_TYPE = 1;\r\n  const TEXT_TYPE = 3;\r\n  const stack = [] //用于存放元素的\r\n  let currentParent;//指向的是栈中的最后一个\r\n  let root;\r\n\r\n  //最终需要转化成一颗抽象语法树\r\n  function createASTElement(tag, attrs) {\r\n    return {\r\n      tag,\r\n      type: ELEMETN_TYPE,\r\n      children: [],\r\n      attrs,\r\n      parent: null\r\n    }\r\n  }\r\n\r\n  //利用栈型解构来构造一棵树\r\n  function start(tag, attrs) {\r\n    let node = createASTElement(tag, attrs) //创造一个ast节点\r\n    if (!root) {//看一下是否是空树\r\n      root = node//如果为空则当前是树的根节点\r\n    }\r\n    if (currentParent) {\r\n      node.parent = currentParent\r\n      currentParent.children.push(node)\r\n    }\r\n    stack.push(node)\r\n    currentParent = node  //currentParent为栈中的最后一个\r\n  }\r\n  function chars(text) {\r\n    text = text.replace(/\\s/g, '')\r\n    text && currentParent.children.push({\r\n      type: TEXT_TYPE,\r\n      text,\r\n      parent: currentParent\r\n    })\r\n  }\r\n  function end(tag) {\r\n    stack.pop() //弹出最后一个\r\n    currentParent = stack[stack.length - 1]\r\n  }\r\n  function advance(length) {\r\n    html = html.substring(length)\r\n  }\r\n  function parseStartTag() {\r\n    const start = html.match(startTagOpen);\r\n    if (start) {\r\n      const match = {\r\n        tagName: start[1], //标签名\r\n        attrs: []\r\n      }\r\n      advance(start[0].length)\r\n      // 如果不是开始标签的结束就一直匹配下去\r\n      let attr, end;\r\n      while (!(end = html.match(startTagClose))) {\r\n        attr = html.match(attribute)\r\n        match.attrs.push({ name: attr[1], value: attr[3] || attr[4] || attr[5] || true })\r\n        advance(attr[0].length)\r\n      }\r\n      if (end) {\r\n        advance(end[0].length)\r\n      }\r\n      return match\r\n    }\r\n    return false\r\n  }\r\n  while (html) {\r\n    //textEnd如果为0说明是一个开始标签或者结束标签\r\n    let textEnd = html.indexOf('<');\r\n    if (textEnd == 0) {\r\n      const startTagMatch = parseStartTag()\r\n      if (startTagMatch) {\r\n        start(startTagMatch.tagName, startTagMatch.attrs)\r\n        continue\r\n      }\r\n      let endTagMatch = html.match(endTag)\r\n      if (endTagMatch) {\r\n        advance(endTagMatch[0].length)\r\n        end(endTagMatch[1])\r\n        continue\r\n      }\r\n    }\r\n    if (textEnd > 0) {\r\n      let text = html.substring(0, textEnd)//文本内容\r\n      if (text) {\r\n        chars(text)\r\n        advance(text.length)\r\n      }\r\n    }\r\n  }\r\n  return root\r\n}\r\n","import { parseHTML } from './parse'\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g\r\n\r\n\r\nfunction gen(node) {\r\n\r\n}\r\n\r\nfunction genChildren() {\r\n\r\n}\r\nfunction genProps(attrs) {\r\n  let str = ''\r\n  for (let i = 0; i < attrs.length; i++) {\r\n    let attr = attrs[i];\r\n    if (attr.name === 'style') {\r\n      let obj = {}\r\n      attr.value.split(';').forEach(item => {\r\n        let [key, value] = item.split(':')\r\n        obj[key] = value\r\n      })\r\n      attr.value = obj\r\n    }\r\n    str += `${attr.name}:${JSON.stringify(attr.value)},`\r\n  }\r\n  return `{${str.slice(0, -1)}}`\r\n}\r\nfunction codegen(ast) {\r\n  let code = `_c('${ast.tag}',${ast.attrs.length > 0 ? genProps(ast.attrs) : 'null'})${ast.genChildren}`\r\n  console.log(code)\r\n  return code\r\n}\r\n\r\nexport function compileToFunction(template) {\r\n  //1.就是将template转化成ast语法树\r\n  let ast = parseHTML(template)\r\n  console.log(ast)\r\n  //2.生成render方法(render方法执行后的返回结果就是虚拟DOM)\r\n  codegen(ast)\r\n}\r\n","import { initState } from './state'\r\nimport { compileToFunction } from './compiler/index'\r\nexport function initMixin(Vue) {\r\n  Vue.prototype._init = function (options) {\r\n    const vm = this;\r\n    vm.$options = options\r\n    initState(vm)\r\n    if (options.el) {\r\n      vm.$mount(options.el)\r\n    }\r\n  }\r\n  Vue.prototype.$mount = function (el) {\r\n    const vm = this;\r\n    el = document.querySelector(el)\r\n    let opts = vm.$options;\r\n    if (!opts.render) {// 如果用户没有自己写 render 函数\r\n      let template\r\n      if (el) {\r\n        if (opts.template) {\r\n          template = opts.template //这里不考虑兼容性细节，直接用 outerHTML 获取整个元素字符串\r\n        } else {\r\n          template = el.outerHTML\r\n        }\r\n      }\r\n\r\n      if (template) {// 这里就拿到了用户传入的 template 或是 el 转化的 template 字符串\r\n        // 在这里对模板进行编译\r\n        const render = compileToFunction(template)\r\n        opts.render = render\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","import { initMixin } from './init'\r\n\r\nfunction Vue(options) {\r\n  this._init(options)\r\n}\r\n\r\n\r\n//通过方法传递 Vue，然后在方法中添加原型方法\r\ninitMixin(Vue)// 传递 Vue 的同时扩展了 _init 方法\r\n\r\nexport default Vue\r\n"],"names":["oldArrayProto","Array","prototype","newArrayProto","Object","create","methods","forEach","method","_oldArrayProto$method","_len","arguments","length","args","_key","result","call","apply","concat","inserted","ob","__ob__","splice","observeArray","Observe","data","_classCallCheck","defineProperty","value","enumerable","isArray","__proto__","walk","_createClass","key","keys","defineReactive","item","observe","target","get","set","newValue","_typeof","initState","vm","opts","$options","initData","proxy","_data","ncname","qnameCapture","startTagOpen","RegExp","endTag","attribute","startTagClose","parseHTML","html","ELEMETN_TYPE","TEXT_TYPE","stack","currentParent","root","createASTElement","tag","attrs","type","children","parent","start","node","push","chars","text","replace","end","pop","advance","substring","parseStartTag","match","tagName","attr","name","textEnd","indexOf","startTagMatch","endTagMatch","genProps","str","_loop","i","obj","split","_item$split","_item$split2","_slicedToArray","JSON","stringify","slice","codegen","ast","code","genChildren","console","log","compileToFunction","template","initMixin","Vue","_init","options","el","$mount","document","querySelector","render","outerHTML"],"mappings":"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"}